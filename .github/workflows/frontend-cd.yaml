name: 'Frontend Continuous Deployment'

# Run this workflows on push against Main branch and enable manual trigger
on:
  push:
    paths:
      - starter/frontend/**
    branches:
      - 'main'
  workflow_dispatch:

env:
  ECR_REPO: frontend
  REACT_APP_MOVIE_API_URL: a7febbf3fd4c94500853c77fadd5c8ea-1426805110.us-east-1.elb.amazonaws.com

jobs:
  # Linting
  linting:
    runs-on: ubuntu-latest
    steps:
      # Check out code
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Setup Node JS
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          # cache: 'npm'
          # cache-dependency-path: ${{github.workspace}}/starter/frontend/package-lock.json

      # Clear cache using an Action
      - name: Clear cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}

      # Install dependencies
      - name: Install dependencies
        run: cd starter/frontend && npm ci

      # Run linting
      - name: Run linting
        run: cd starter/frontend && npm run lint --fix # npx eslint --fix .
        
  # Testing
  testing:
    runs-on: ubuntu-latest
    steps:
      # Check out code
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Setup Node JS
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          # cache: 'npm'
          # cache-dependency-path: ${{github.workspace}}/starter/frontend/package-lock.json

      # Clear cache using an Action
      - name: Clear cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}

      # Install dependencies
      - name: Install dependencies
        run: cd starter/frontend && npm ci

      # Run tests
      - name: Run tests
        run: cd starter/frontend && npm run test

  # Building only if above 2 pass
  building:
    needs: [linting, testing]
    runs-on: ubuntu-latest
    steps:
      # Check out code
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Setup Node JS
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          # cache: 'npm'
          # cache-dependency-path: ${{github.workspace}}/starter/frontend/package-lock.json

      # Clear cache using an Action
      - name: Clear cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }} 
      
      # Install dependencies
      - name: Install dependencies
        run: cd starter/frontend && npm ci

      # Run tests
      - name: Run tests
        run: cd starter/frontend && npm run test

      # Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
          aws-region: us-east-1

      # Log in to ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Tag and push image to ECR
      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{env.ECR_REPO}}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --build-arg REACT_APP_MOVIE_API_URL=${{ env.REACT_APP_MOVIE_API_URL }} -t $REGISTRY/$REPOSITORY:$IMAGE_TAG ./starter/frontend
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      # Configure Kubernetes cluster
      - name: Configure kubernetes cluster
        working-directory: starter/frontend/k8s
        run: aws eks update-kubeconfig --region us-east-1 --name cluster

      # Select image from ECR
      - name: Select image
        working-directory: starter/frontend/k8s
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{env.ECR_REPO}}
          IMAGE_TAG: ${{ github.sha }}
        run: kustomize edit set image frontend=$REGISTRY/$REPOSITORY:$IMAGE_TAG

      # Deploy to cluster
      - name: Deploy to cluster
        working-directory: starter/frontend/k8s
        run: kustomize build | kubectl apply -f - 